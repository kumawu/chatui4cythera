{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/lihan2/Documents/project/chatui4cythera/src/app/dashboard/components/ChatComponent.tsx"],"sourcesContent":["interface SyncProps {\n  isDone: boolean;\n  thinkTime: number;\n  children: React.ReactNode;\n}\n\nconst Sync: React.FC<SyncProps> = ({ isDone, thinkTime, children }) => {\n  return (\n    <div className=\"sync-container\">\n      {children}\n    </div>\n  );\n};\n'use client';\nimport { marked } from 'marked';\nimport { useEffect } from 'react';\nimport '../../../i18n';\nimport { useTranslation } from 'react-i18next';\n\n// 配置marked支持表格等复杂markdown元素\nmarked.setOptions({\n  gfm: true, // 启用GitHub风格的Markdown，包含表格支持\n  breaks: true, // 将单行换行转换为<br>\n  pedantic: false // 不严格遵循原始Markdown\n});\nimport React, { useState, useRef, useCallback } from 'react';\nimport Chat, { Think, Bubble, useMessages } from '@chatui/core';\nimport { useThinkContext, type ThinkData } from '../ThinkContext';\nimport '@chatui/core/dist/index.css';\nimport './chat-styles.css';\n\ninterface Message {\n  type: string;\n  content?: {\n    text?: string;\n    [key: string]: any;\n  };\n  position?: 'left' | 'right' | 'center' | 'pop';\n  loading?: boolean; // 添加 loading 属性\n}\n\ninterface QuickReply {\n  name: string;\n  isNew?: boolean;\n  isHighlight?: boolean;\n}\n\n// 根据不同角色定义快速回复选项\nconst ROLE_QUICK_REPLIES: Record<string, QuickReply[]> = {\n  '数字能效分析师': [\n    {name: '💡照明系统是不是开得太久了？有节省空间吗？🤔'},\n    {name: '💨这几天挺热🌡️，我想知道空调用电是不是超了？🤔'}\n  ],\n  '数字环境专员': [\n    { name: '📡冷库环境最近波动大，是不是外面太热？'},\n    { name: '🚨有没有严重告警要立即处理？'}\n  ],\n  '数字设备健康主管': [\n    {name: '🔍调出最近3天空调用电趋势，我看看变化。'},\n    {name: '🛠有没有哪台空调的能耗曲线特别奇怪？'}\n  ],\n  '数字综合运营协调员': [\n    {name: '🔎 今天整体状况如何？'},\n    {name: '📈 最近总能耗趋势怎么样？'},\n  ]\n};\n\n// 默认快速回复选项\nconst DEFAULT_QUICK_REPLIES: QuickReply[] = [];\n\ninterface ChatComponentProps {\n  currentRole?: string;\n}\n\nexport default function ChatComponent({ currentRole = '数字能效分析师' }: ChatComponentProps) {\n  const { t } = useTranslation('translation');\n  const { messages, appendMsg, updateMsg } = useMessages([]);\n  const { setThinkData } = useThinkContext();\n  const [isTyping, setIsTyping] = useState(false);\n  const [isStreaming, setIsStreaming] = useState(false); // 添加流式响应状态\n  const chatRef = useRef<any>(null);\n  const thinkContentRef = useRef<string | null>(null);\n\n  useEffect(() => {\n    console.log('thinkContentRef 更新检测:', thinkContentRef.current);\n    if (thinkContentRef.current) {\n      try {\n        // 尝试直接解析 JSON\n        let parsedData;\n        try {\n          parsedData = JSON.parse(thinkContentRef.current);\n          console.log('直接解析成功:', parsedData);\n          \n          // 如果已经是结构化数据，直接使用\n          if (parsedData.cards || parsedData.charts) {\n            console.log('使用预先解析的数据更新 ThinkData');\n            setThinkData({\n              content: thinkContentRef.current,\n              parsedContent: {\n                layout: parsedData.layout,\n                cards: parsedData.cards,\n                charts: parsedData.charts?.map((chart: any) => ({\n                  ...chart,\n                  data: typeof chart.data === 'string' ? chart.data : JSON.stringify(chart.data)\n                }))\n              },\n              metadata: {\n                type: 'dashboard',\n                timestamp: new Date().toISOString()\n              }\n            });\n            return;\n          }\n        } catch (e) {\n          console.log('直接解析失败，尝试使用 DSL 解析器');\n        }\n      } catch (error) {\n        console.error('Think内容更新错误:', error);\n      }\n    }\n  }, [messages, setThinkData]);\n\n  async function handleSend(type: string, val: string) {\n    if (type === 'text' && val.trim()) {\n      appendMsg({\n        type: 'text',\n        content: { text: val },\n        position: 'right',\n      });\n\n      setIsTyping(true); // 设置正在输入状态\n      setIsStreaming(true); // 设置流式响应状态为 true\n      try {\n        // 初始化一个空的回复消息，空消息会自动显示为 loading 状态\n        const messageId = Date.now().toString();\n        appendMsg({\n          _id: messageId,\n          type: 'markdown', // 使用 markdown 类型\n          content: { text: '' }, // 空消息内容会显示为 loading 状态\n          position: 'left',\n        });\n        const currentMessageId = messageId;\n        \n        // 根据当前角色选择对应的 chatBot API\n        let chatBot = '/api/chat-bot1'; // 默认值\n        \n        // 根据 currentRole 来选择不同的 API 端点\n        switch (currentRole) {\n          case '数字能效分析师':\n            chatBot = '/api/chat-bot1';\n            break;\n          case '数字环境专员':\n            chatBot = '/api/chat-bot2';\n            break;\n          case '数字设备健康主管':\n            chatBot = '/api/chat-bot3';\n            break;\n          case '数字综合运营协调员':\n            chatBot = '/api/chat-bot4';\n            break;\n          default:\n            chatBot = '/api/chat-bot4';\n            break;\n        }\n        \n        console.log(`当前角色: ${currentRole}, 使用 API: ${chatBot}`);\n        \n        const chatResponse = await fetch(chatBot, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ message: val, role: currentRole })\n        });\n        \n        if (!chatResponse.ok) {\n          throw new Error('Chat API 请求失败');\n        }\n        \n        // 处理流式响应\n        const reader = chatResponse.body?.getReader();\n        if (!reader) {\n          throw new Error('无法获取响应流');\n        }\n        \n        let accumulatedContent = '';\n        let noDataContent = '';\n        let conversationId: string | null = null;\n        let finishFlag = false;\n        \n        // 读取流数据\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          \n          // 将数据转换为文本\n          const chunk = new TextDecoder().decode(value);\n          const lines = chunk.split('\\n\\n').filter(line => line.trim() !== '');\n          \n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              const data = line.slice(6);\n              try {\n                const parsedData = JSON.parse(data);\n                \n                // 保存会话 ID\n                if (parsedData.metadata?.conversation_id && !conversationId) {\n                  conversationId = parsedData.metadata.conversation_id;\n                }\n                accumulatedContent += parsedData.content;\n                \n                if(currentMessageId && !finishFlag){\n                  // 如果收到了<tools_data_result>就停止更新message\n                  if (accumulatedContent.includes('<tools_data_result>')) {\n                    finishFlag = true;\n                    noDataContent = accumulatedContent.replace('<tools_data_result>', '');\n                    \n                    updateMsg(currentMessageId, {\n                      type: 'markdown',\n                      content: { text: noDataContent },\n                      position: 'left',\n                    });\n                  }else {\n                    // 每次更新都保持使用 markdown 类型\n                    updateMsg(currentMessageId, {\n                      type: 'markdown',\n                      content: { text: accumulatedContent },\n                      position: 'left',\n                    });\n                  }\n                }\n                \n                // 如果收到结束事件，则保存完整回复\n                if (parsedData.metadata?.event_type === 'message_end') {\n                  \n                  \n                  // 将消息内容存入 Think 上下文\n                  console.log('完整响应:', accumulatedContent);\n                  \n                  // 调用 data-format 接口获取格式化数据\n                  fetch('/api/data-format', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                      message: accumulatedContent,\n                      role: 'user'\n                    })\n                  })\n                  .then(response => response.json())\n                  .then(data => {\n                    // 从 data-format 接口响应中获取内容并设置到 \n                    // 流式响应完成，获取数据完成，设置状态为 false\n                    setIsStreaming(false);\n                    setIsTyping(false); // 同时关闭打字指示器\n\n                    setThinkData({\n                      content: noDataContent,\n                      parsedContent: {\n                        layout: 'grid(2, 2)',\n                        cards: data.cards,\n                        charts: data.charts?.map((chart: any) => ({\n                          ...chart,\n                          data: typeof chart.data === 'string' ? chart.data : JSON.stringify(chart.data)\n                        }))\n                      },\n                      metadata: {\n                        type: 'dashboard',\n                        timestamp: new Date().toISOString()\n                      }\n                    });\n                  })\n                  .catch(error => {\n                    console.error('调用 data-format 接口出错:', error);\n                  });\n                  \n                  break;\n                }\n              } catch (e) {\n                console.error('解析流数据错误:', e, data);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('发送消息时出错:', error);\n        appendMsg({\n          type: 'text',\n          content: { text: '处理请求时出错' },\n          position: 'left',\n        });\n        // 发生错误时，重置所有状态\n        setIsStreaming(false);\n        }\n      setIsTyping(false); // 关闭打字指示器\n    }\n  }\n\n  function handleQuickReplyClick(item: QuickReply) {\n    handleSend('text', item.name);\n  }\n\n  const renderMessageContent = useCallback((msg: Message) => {\n    const { type, content } = msg;\n    console.log('msg', msg);\n    \n    // 如果消息内容为空且正在流式响应中，显示自定义的 loading 指示器\n    if (type === 'markdown' && (!content?.text || content.text === '') && isStreaming && msg.position === 'left') {\n      console.log('显示 loading 指示器', msg);\n      return (\n        <Bubble>\n          <div className=\"flex items-center space-x-2 p-2\">\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 rounded-full bg-indigo-400 animate-pulse\" style={{ animationDelay: '0ms' }}></div>\n              <div className=\"w-2 h-2 rounded-full bg-indigo-400 animate-pulse\" style={{ animationDelay: '300ms' }}></div>\n              <div className=\"w-2 h-2 rounded-full bg-indigo-400 animate-pulse\" style={{ animationDelay: '600ms' }}></div>\n            </div>\n            <span className=\"text-sm text-indigo-300\">正在生成响应...</span>\n          </div>\n        </Bubble>\n      );\n    }\n    \n    if (type === 'text' && content?.text) {\n      return <Bubble content={content.text} />;\n    }\n    \n    if (type === 'markdown' && content) {\n      const text = typeof content === 'string' ? content : content?.text || '';\n      const html = marked.parse(text);\n      \n      return (\n        <div className=\"markdown-content p-6 bg-white/5 rounded-lg\">\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n\n          {isStreaming && msg.position === 'left' && (\n            <div className=\"flex items-center space-x-2 mt-3 border-t border-white/10 pt-3\">\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 rounded-full bg-indigo-400 animate-pulse\" style={{ animationDelay: '0ms' }}></div>\n                <div className=\"w-2 h-2 rounded-full bg-indigo-400 animate-pulse\" style={{ animationDelay: '300ms' }}></div>\n                <div className=\"w-2 h-2 rounded-full bg-indigo-400 animate-pulse\" style={{ animationDelay: '600ms' }}></div>\n              </div>\n              <span className=\"text-sm text-indigo-300\">正在生成...</span>\n            </div>\n          )}\n        </div>\n      );\n    }\n    \n    // 处理 think 类型消息\n    if (type === 'think' && content) {\n      console.log('Think 消息接收到:', content);\n      \n      try {\n        // 将 think 内容保存到 ref 中，这样 useEffect 可以检测到并更新 ThinkContext\n        if (content.parsedContent) {\n          // thinkContentRef.current = JSON.stringify(content.parsedContent);\n          console.log('设置 thinkContentRef:', thinkContentRef.current);\n        }\n      } catch (error) {\n        console.error('处理 Think 消息失败:', error);\n      }\n      \n      return (\n        <Bubble>\n          <Think isDone thinkTime={3}>\n            <div className=\"p-4\">\n              <pre>{JSON.stringify(content, null, 2)}</pre>\n            </div>\n          </Think>\n        </Bubble>\n      );\n    }\n    \n    // 处理旧的 dsl 类型消息（兼容性）\n    if (type === 'dsl' && content) {\n      console.log('DSL 消息接收到:', content);\n      \n      try {\n        if(\"component_name\" in content && content[\"component_name\"] === \"dashboard\" ){\n          console.log('dashboard', content);\n          updateTremorDashboard(content[\"content\"]);\n          \n          // 将 DSL 内容保存到 ref 中\n          thinkContentRef.current = JSON.stringify(content[\"content\"]);\n          console.log('设置 thinkContentRef (DSL):', thinkContentRef.current);\n        }\n      } catch (error) {\n        console.error('解析DSL失败:', error);\n      }\n      \n      return (\n        <Bubble>\n          <Think isDone thinkTime={3}>\n            <div className=\"p-4\">\n              <pre>{thinkContentRef.current}</pre>\n            </div>\n          </Think>\n        </Bubble>\n      );\n    }\n    \n    return null;\n  }, [isStreaming]); // 添加 isStreaming 作为依赖项，确保状态变化时函数重新创建\n\n  interface DashboardConfig {\n    layout?: string;\n    cards?: Array<{\n      type: string;\n      metrics: Array<{\n        title: string;\n        value: string | number;\n        trend?: string;\n      }>;\n    }>;\n    charts?: Array<{\n      type: string;\n      data: Array<Record<string, any>>;\n      title: string;\n      xAxis?: string;\n      yAxis?: string;\n    }>;\n  }\n\n  function updateTremorDashboard(config: DashboardConfig) {\n    // 这里实现更新Tremor大屏的逻辑\n    console.log('更新Tremor大屏配置:', config);\n    \n    // 示例：更新卡片数据\n    if (config.cards) {\n      config.cards.forEach(card => {\n        console.log('更新卡片:', card);\n        // 实际更新逻辑需要根据具体UI框架实现\n      });\n    }\n    \n    // 示例：更新图表数据\n    if (config.charts) {\n      config.charts.forEach(chart => {\n        console.log('更新图表:', chart.type, chart.data);\n        // 实际更新逻辑需要根据具体UI框架实现\n      });\n    }\n  }\n\n  // 根据当前角色获取对应的快速回复选项\n  const getQuickRepliesByRole = () => {\n    return ROLE_QUICK_REPLIES[currentRole] || DEFAULT_QUICK_REPLIES;\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-transparent\">\n      {isTyping && !isStreaming && (\n        <div className=\"px-4 py-2 text-xs text-gray-500\">\n          <div className=\"flex items-center\">\n            <div className=\"flex space-x-1 mr-2\">\n              <div className=\"w-1.5 h-1.5 rounded-full bg-gray-400 animate-pulse\" style={{ animationDelay: '0ms' }}></div>\n              <div className=\"w-1.5 h-1.5 rounded-full bg-gray-400 animate-pulse\" style={{ animationDelay: '300ms' }}></div>\n              <div className=\"w-1.5 h-1.5 rounded-full bg-gray-400 animate-pulse\" style={{ animationDelay: '600ms' }}></div>\n            </div>\n            <span>{t('chat.typing', '对方正在输入...')}</span>\n          </div>\n        </div>\n      )}\n      <Chat\n        navbar={{ title: '' }}\n        messages={messages}\n        renderMessageContent={renderMessageContent}\n        onSend={isStreaming ? () => {} : handleSend} // 流式响应过程中禁用发送功能\n        locale=\"en\"\n        placeholder={isStreaming ? t('chat.placeholder') : t('chat.placeholder')}\n        ref={chatRef}\n        toolbar={[]}\n        quickReplies={isStreaming ? [] : getQuickRepliesByRole()} // 流式响应过程中隐藏快捷回复\n        onQuickReplyClick={isStreaming ? () => {} : handleQuickReplyClick} // 流式响应过程中禁用快捷回复功能\n      />\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}