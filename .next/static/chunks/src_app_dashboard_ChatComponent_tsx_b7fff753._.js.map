{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/lihan2/Documents/project/chatui4cythera/src/app/dashboard/ChatComponent.tsx"],"sourcesContent":["interface SyncProps {\n  isDone: boolean;\n  thinkTime: number;\n  children: React.ReactNode;\n}\n\nconst Sync: React.FC<SyncProps> = ({ isDone, thinkTime, children }) => {\n  return (\n    <div className=\"sync-container\">\n      {children}\n    </div>\n  );\n};\n'use client';\nimport { marked } from 'marked';\nimport { useEffect } from 'react';\n\n// 配置marked支持表格等复杂markdown元素\nmarked.setOptions({\n  gfm: true, // 启用GitHub风格的Markdown，包含表格支持\n  breaks: true, // 将单行换行转换为<br>\n  pedantic: false // 不严格遵循原始Markdown\n});\nimport React, { useState, useRef, useCallback } from 'react';\nimport Chat, { Think, Bubble, useMessages } from '@chatui/core';\nimport { useThinkContext, type ThinkData } from './ThinkContext';\nimport '@chatui/core/dist/index.css';\nimport './chat-styles.css';\n\ninterface Message {\n  type: string;\n  content?: {\n    text?: string;\n    [key: string]: any;\n  };\n  position?: 'left' | 'right' | 'center' | 'pop';\n}\n\ninterface QuickReply {\n  name: string;\n  isNew?: boolean;\n  isHighlight?: boolean;\n}\n\n// 根据不同角色定义快速回复选项\nconst ROLE_QUICK_REPLIES: Record<string, QuickReply[]> = {\n  // 数字能效分析师\n  '数字能效分析师': [\n    {\n      name: '分析能耗数据',\n      isNew: true\n    },\n    {\n      name: '查看节能报告',\n      isHighlight: true\n    },\n    {\n      name: '设备能效对比'\n    },\n    {\n      name: '能耗异常检测'\n    }\n  ],\n  // 数字环境专员\n  '数字环境专员': [\n    {\n      name: '监控冷库温度',\n      isNew: true\n    },\n    {\n      name: '环境指标报告',\n      isHighlight: true\n    },\n    {\n      name: '光照优化建议'\n    },\n    {\n      name: '湿度异常检测'\n    }\n  ],\n  // 数字安防监控员\n  '数字安防监控员': [\n    {\n      name: '监控区域状态',\n      isNew: true\n    },\n    {\n      name: '异常人员检测',\n      isHighlight: true\n    },\n    {\n      name: '安防系统状态'\n    },\n    {\n      name: '查看安全报告'\n    }\n  ],\n  // 数字设备健康主管\n  '数字设备健康主管': [\n    {\n      name: '设备状态检测',\n      isNew: true\n    },\n    {\n      name: '预测性维护提醒',\n      isHighlight: true\n    },\n    {\n      name: '设备故障分析'\n    },\n    {\n      name: '维修记录查询'\n    }\n  ],\n  // 数字综合运营协调员\n  '数字综合运营协调员': [\n    {\n      name: '整合多源数据',\n      isNew: true\n    },\n    {\n      name: '运营状态监控',\n      isHighlight: true\n    },\n    {\n      name: '部门协作效率'\n    },\n    {\n      name: '生成月度报告'\n    }\n  ]\n};\n\n// 默认快速回复选项\nconst DEFAULT_QUICK_REPLIES: QuickReply[] = [\n  {\n    name: '你好！',\n    isNew: true\n  },\n  {\n    name: '我需要技术支持',\n    isHighlight: true\n  },\n  {\n    name: '我想了解产品信息'\n  }\n];\n\ninterface ChatComponentProps {\n  currentRole?: string;\n}\n\nexport default function ChatComponent({ currentRole = '数字能效分析师' }: ChatComponentProps) {\n  const { messages, appendMsg } = useMessages([]);\n  const { setThinkData } = useThinkContext();\n  const [isTyping, setIsTyping] = useState(false);\n  const chatRef = useRef<any>(null);\n  const thinkContentRef = useRef<string | null>(null);\n\n  useEffect(() => {\n    console.log('thinkContentRef 更新检测:', thinkContentRef.current);\n    if (thinkContentRef.current) {\n      try {\n        // 尝试直接解析 JSON\n        let parsedData;\n        try {\n          parsedData = JSON.parse(thinkContentRef.current);\n          console.log('直接解析成功:', parsedData);\n          \n          // 如果已经是结构化数据，直接使用\n          if (parsedData.cards || parsedData.charts) {\n            console.log('使用预先解析的数据更新 ThinkData');\n            setThinkData({\n              content: thinkContentRef.current,\n              parsedContent: {\n                layout: parsedData.layout,\n                cards: parsedData.cards,\n                charts: parsedData.charts?.map((chart: any) => ({\n                  ...chart,\n                  data: typeof chart.data === 'string' ? chart.data : JSON.stringify(chart.data)\n                }))\n              },\n              metadata: {\n                type: 'dashboard',\n                timestamp: new Date().toISOString()\n              }\n            });\n            return;\n          }\n        } catch (e) {\n          console.log('直接解析失败，尝试使用 DSL 解析器');\n        }\n        \n        // 如果直接解析失败或不是预期的格式，尝试使用 DSL 解析器\n        // const parsedContent = parseDashboardDSL(thinkContentRef.current);\n        // console.groupCollapsed('Think内容更新');\n        // console.log('原始内容:', thinkContentRef.current);\n        // console.log('解析后的配置:', parsedContent);\n        // console.groupEnd();\n        \n        // setThinkData({\n        //   content: thinkContentRef.current,\n        //   parsedContent: parsedContent ? {\n        //     layout: parsedContent.layout,\n        //     cards: parsedContent.cards,\n        //     charts: parsedContent.charts?.map(chart => ({\n        //       ...chart,\n        //       data: JSON.stringify(chart.data)\n        //     }))\n        //   } : undefined,\n        //   metadata: {\n        //     type: 'dashboard',\n        //     timestamp: new Date().toISOString()\n        //   }\n        // });\n      } catch (error) {\n        console.error('Think内容更新错误:', error);\n      }\n    }\n  }, [messages, setThinkData]);\n\n  async function handleSend(type: string, val: string) {\n    if (type === 'text' && val.trim()) {\n      appendMsg({\n        type: 'text',\n        content: { text: val },\n        position: 'right',\n      });\n\n      setIsTyping(true);\n      try {\n        // 将当前角色信息添加到请求中\n        const response = await fetch('/api/daily-report', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ message: val, role: currentRole })\n        });\n        \n        if (!response.ok) {\n          throw new Error('请求失败');\n        }\n        \n        const responseData = await response.json();\n        console.log('Response:', responseData);\n\n        // 检查response是否为数组\n        if (Array.isArray(responseData)) {\n          // 如果是数组，依次添加每个消息\n          responseData.forEach(msg => {\n            console.log('添加消息:', msg.type, msg);\n            appendMsg({\n              type: msg.type,\n              content: typeof msg.content === 'string' ? { text: msg.content } : msg.content,\n              position: msg.position,\n            });\n          });\n        } else {\n          // 如果不是数组，按原来的方式处理\n          appendMsg({\n            type: responseData.type,\n            content: { text: responseData.content },\n            position: responseData.position,\n          });\n        }\n      } catch (error) {\n        console.error('发送消息时出错:', error);\n        appendMsg({\n          type: 'text',\n          content: { text: '处理请求时出错' },\n          position: 'left',\n        });\n      }\n      setIsTyping(false);\n    }\n  }\n\n  function handleQuickReplyClick(item: QuickReply) {\n    handleSend('text', item.name);\n  }\n\n  const renderMessageContent = useCallback((msg: Message) => {\n    const { type, content } = msg;\n    console.log('msg', msg);\n    if (type === 'text' && content?.text) {\n      return <Bubble content={content.text} />;\n    }\n    \n    if (type === 'markdown' && content) {\n      const text = typeof content === 'string' ? content : content?.text || '';\n      const html = marked.parse(text);\n      \n      return (\n        <div className=\"markdown-content p-4 bg-white/5 rounded-lg\">\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n        </div>\n      );\n    }\n    \n    // 处理 think 类型消息\n    if (type === 'think' && content) {\n      console.log('Think 消息接收到:', content);\n      \n      try {\n        // 将 think 内容保存到 ref 中，这样 useEffect 可以检测到并更新 ThinkContext\n        if (content.parsedContent) {\n          thinkContentRef.current = JSON.stringify(content.parsedContent);\n          console.log('设置 thinkContentRef:', thinkContentRef.current);\n        }\n      } catch (error) {\n        console.error('处理 Think 消息失败:', error);\n      }\n      \n      return (\n        <Bubble>\n          <Think isDone thinkTime={3}>\n            <div className=\"p-4\">\n              <pre>{JSON.stringify(content, null, 2)}</pre>\n            </div>\n          </Think>\n        </Bubble>\n      );\n    }\n    \n    // 处理旧的 dsl 类型消息（兼容性）\n    if (type === 'dsl' && content) {\n      console.log('DSL 消息接收到:', content);\n      \n      try {\n        if(\"component_name\" in content && content[\"component_name\"] === \"dashboard\" ){\n          console.log('dashboard', content);\n          updateTremorDashboard(content[\"content\"]);\n          \n          // 将 DSL 内容保存到 ref 中\n          thinkContentRef.current = JSON.stringify(content[\"content\"]);\n          console.log('设置 thinkContentRef (DSL):', thinkContentRef.current);\n        }\n      } catch (error) {\n        console.error('解析DSL失败:', error);\n      }\n      \n      return (\n        <Bubble>\n          <Think isDone thinkTime={3}>\n            <div className=\"p-4\">\n              <pre>{thinkContentRef.current}</pre>\n            </div>\n          </Think>\n        </Bubble>\n      );\n    }\n    \n    return null;\n  }, []); // 空依赖数组，表示这个函数只会创建一次\n\n  interface DashboardConfig {\n    layout?: string;\n    cards?: Array<{\n      type: string;\n      metrics: Array<{\n        title: string;\n        value: string | number;\n        trend?: string;\n      }>;\n    }>;\n    charts?: Array<{\n      type: string;\n      data: Array<Record<string, any>>;\n      title: string;\n      xAxis?: string;\n      yAxis?: string;\n    }>;\n  }\n\n  function updateTremorDashboard(config: DashboardConfig) {\n    // 这里实现更新Tremor大屏的逻辑\n    console.log('更新Tremor大屏配置:', config);\n    \n    // 示例：更新卡片数据\n    if (config.cards) {\n      config.cards.forEach(card => {\n        console.log('更新卡片:', card);\n        // 实际更新逻辑需要根据具体UI框架实现\n      });\n    }\n    \n    // 示例：更新图表数据\n    if (config.charts) {\n      config.charts.forEach(chart => {\n        console.log('更新图表:', chart.type, chart.data);\n        // 实际更新逻辑需要根据具体UI框架实现\n      });\n    }\n  }\n\n  // 辅助函数：解析Dashboard DSL配置\n  function parseDashboardDSL(dslContent: string): DashboardConfig | null {\n    // 提取dashboard配置块\n    const dashboardRegex = /dashboard\\s*{([\\s\\S]*?)}/;\n    const dashboardMatch = dslContent.match(dashboardRegex);\n    \n    if (!dashboardMatch) {\n      return null;\n    }\n    \n    const configContent = dashboardMatch[1];\n    \n    try {\n      const result: DashboardConfig = {};\n      \n      // 提取layout\n      const layoutMatch = configContent.match(/layout:\\s*([^\\s;]+)/);\n      if (layoutMatch) {\n        result.layout = layoutMatch[1];\n      }\n      \n      // 提取cards\n      const cardRegex = /card\\s*{([\\s\\S]*?)}/g;\n      let cardMatch;\n      result.cards = [];\n      \n      while ((cardMatch = cardRegex.exec(configContent)) !== null) {\n        const cardContent = cardMatch[1];\n        const typeMatch = cardContent.match(/type:\\s*\"([^\"]+)\"/);\n        const metricsMatch = cardContent.match(/metrics:\\s*\\[([\\s\\S]*?)\\]/);\n        \n        if (typeMatch && metricsMatch) {\n          const metrics = metricsMatch[1]\n            .split('},')\n            .map(metricStr => {\n              const titleMatch = metricStr.match(/title:\\s*\"([^\"]+)\"/);\n              const valueMatch = metricStr.match(/value:\\s*([^,}]+)/);\n              const trendMatch = metricStr.match(/trend:\\s*\"([^\"]+)\"/);\n              \n              const metric: {\n                title: string;\n                value: string | number;\n                trend?: string;\n              } = {\n                title: titleMatch ? titleMatch[1] : '',\n                value: valueMatch ? valueMatch[1].replace(/\"/g, '') : ''\n              };\n              \n              if (trendMatch) {\n                metric.trend = trendMatch[1];\n              }\n              \n              // 尝试将value转换为数字\n              if (!isNaN(Number(metric.value))) {\n                metric.value = Number(metric.value);\n              }\n              \n              return metric;\n            });\n          \n          result.cards.push({\n            type: typeMatch[1],\n            metrics\n          });\n        }\n      }\n      \n      // 提取charts\n      const chartRegex = /chart\\s*{([\\s\\S]*?)}/g;\n      let chartMatch;\n      result.charts = [];\n      \n      while ((chartMatch = chartRegex.exec(configContent)) !== null) {\n        const chartContent = chartMatch[1];\n        const typeMatch = chartContent.match(/type:\\s*\"([^\"]+)\"/);\n        const titleMatch = chartContent.match(/title:\\s*\"([^\"]+)\"/);\n        const xAxisMatch = chartContent.match(/xAxis:\\s*\"([^\"]+)\"/);\n        const yAxisMatch = chartContent.match(/yAxis:\\s*\"([^\"]+)\"/);\n        \n        const chart: {\n          type: string;\n          data: Array<Record<string, any>>;\n          title: string;\n          xAxis?: string;\n          yAxis?: string;\n        } = {\n          type: typeMatch ? typeMatch[1] : '',\n          data: [],\n          title: titleMatch ? titleMatch[1] : ''\n        };\n        \n        if (xAxisMatch) {\n          chart.xAxis = xAxisMatch[1];\n        }\n        if (yAxisMatch) {\n          chart.yAxis = yAxisMatch[1];\n        }\n        \n        // 根据图表类型生成示例数据\n        let data: Array<Record<string, any>> = [];\n        if (chart.type === 'bar') {\n          data = [\n            { name: \"1月\", value: 120 },\n            { name: \"2月\", value: 150 },\n            { name: \"3月\", value: 180 },\n            { name: \"4月\", value: 200 },\n            { name: \"5月\", value: 220 },\n            { name: \"6月\", value: 250 },\n            { name: \"7月\", value: 280 }\n          ];\n        } else if (chart.type === 'line') {\n          data = [\n            { range: \"0-10k\", count: 50 },\n            { range: \"10-20k\", count: 110 },\n            { range: \"20-30k\", count: 90 },\n            { range: \"30k+\", count: 50 }\n          ];\n        } else if (chart.type === 'pie' || chart.type === 'radar') {\n          data = [\n            { name: \"工程师\", value: 100 },\n            { name: \"市场\", value: 60 },\n            { name: \"销售\", value: 50 },\n            { name: \"设计\", value: 25 },\n            { name: \"HR\", value: 45 }\n          ];\n        }\n        \n        result.charts.push({\n          ...chart,\n          data\n        });\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('DSL解析错误:', error);\n      return null;\n    }\n  }\n\n  // 辅助函数：从DSL内容中提取特定属性值\n  function extractValue(content: string, key: string): string | null {\n    const regex = new RegExp(`${key}\\\\s*:\\\\s*[\"']?([^,\"'\\\\n\\\\r}]*)[\"']?`, 'i');\n    const match = content.match(regex);\n    return match ? match[1].trim() : null;\n  }\n\n  // 辅助函数：提取指标数组\n  function extractMetrics(content: string): Array<{title: string | null; value: string | null; trend: string | null}> {\n    if (!content.includes('metrics')) {\n      return [];\n    }\n    \n    const metricsStart = content.indexOf('metrics');\n    const metricsEnd = content.indexOf(']', metricsStart);\n    if (metricsStart === -1 || metricsEnd === -1) {\n      return [];\n    }\n    \n    const metricsContent = content.substring(metricsStart, metricsEnd + 1);\n    const metricObjects = metricsContent.match(/{([^}]*)}/g) || [];\n    \n    return metricObjects.map(metricStr => {\n      return {\n        title: extractValue(metricStr, 'title'),\n        value: extractValue(metricStr, 'value'),\n        trend: extractValue(metricStr, 'trend')\n      };\n    });\n  }\n\n  // 根据当前角色获取对应的快速回复选项\n  const getQuickRepliesByRole = () => {\n    return ROLE_QUICK_REPLIES[currentRole] || DEFAULT_QUICK_REPLIES;\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-transparent\">\n      {/* 移除角色选择器，但保留角色选择功能 */}\n      <Chat\n        navbar={{ title: '' }}\n        messages={messages}\n        renderMessageContent={renderMessageContent}\n        onSend={handleSend}\n        locale=\"zh-CN\"\n        placeholder=\"请输入...\"\n        ref={chatRef}\n        toolbar={[]}\n        quickReplies={getQuickRepliesByRole()}\n        onQuickReplyClick={handleQuickReplyClick}\n      />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAcA;AACA;AASA;AACA;;;AAnBA,MAAM,OAA4B,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE;IAChE,qBACE,6LAAC;QAAI,WAAU;kBACZ;;;;;;AAGP;KANM;AAON;;;AAIA,4BAA4B;AAC5B,iJAAA,CAAA,SAAM,CAAC,UAAU,CAAC;IAChB,KAAK;IACL,QAAQ;IACR,UAAU,MAAM,kBAAkB;AACpC;;;;;;AAsBA,iBAAiB;AACjB,MAAM,qBAAmD;IACvD,UAAU;IACV,WAAW;QACT;YACE,MAAM;YACN,OAAO;QACT;QACA;YACE,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;QACR;QACA;YACE,MAAM;QACR;KACD;IACD,SAAS;IACT,UAAU;QACR;YACE,MAAM;YACN,OAAO;QACT;QACA;YACE,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;QACR;QACA;YACE,MAAM;QACR;KACD;IACD,UAAU;IACV,WAAW;QACT;YACE,MAAM;YACN,OAAO;QACT;QACA;YACE,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;QACR;QACA;YACE,MAAM;QACR;KACD;IACD,WAAW;IACX,YAAY;QACV;YACE,MAAM;YACN,OAAO;QACT;QACA;YACE,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;QACR;QACA;YACE,MAAM;QACR;KACD;IACD,YAAY;IACZ,aAAa;QACX;YACE,MAAM;YACN,OAAO;QACT;QACA;YACE,MAAM;YACN,aAAa;QACf;QACA;YACE,MAAM;QACR;QACA;YACE,MAAM;QACR;KACD;AACH;AAEA,WAAW;AACX,MAAM,wBAAsC;IAC1C;QACE,MAAM;QACN,OAAO;IACT;IACA;QACE,MAAM;QACN,aAAa;IACf;IACA;QACE,MAAM;IACR;CACD;AAMc,SAAS,cAAc,EAAE,cAAc,SAAS,EAAsB;;IACnF,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,oJAAA,CAAA,cAAW,AAAD,EAAE,EAAE;IAC9C,MAAM,EAAE,YAAY,EAAE,GAAG,CAAA,GAAA,2IAAA,CAAA,kBAAe,AAAD;IACvC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAO;IAC5B,MAAM,kBAAkB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAiB;IAE9C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,QAAQ,GAAG,CAAC,yBAAyB,gBAAgB,OAAO;YAC5D,IAAI,gBAAgB,OAAO,EAAE;gBAC3B,IAAI;oBACF,cAAc;oBACd,IAAI;oBACJ,IAAI;wBACF,aAAa,KAAK,KAAK,CAAC,gBAAgB,OAAO;wBAC/C,QAAQ,GAAG,CAAC,WAAW;wBAEvB,kBAAkB;wBAClB,IAAI,WAAW,KAAK,IAAI,WAAW,MAAM,EAAE;4BACzC,QAAQ,GAAG,CAAC;4BACZ,aAAa;gCACX,SAAS,gBAAgB,OAAO;gCAChC,eAAe;oCACb,QAAQ,WAAW,MAAM;oCACzB,OAAO,WAAW,KAAK;oCACvB,QAAQ,WAAW,MAAM,EAAE;mEAAI,CAAC,QAAe,CAAC;gDAC9C,GAAG,KAAK;gDACR,MAAM,OAAO,MAAM,IAAI,KAAK,WAAW,MAAM,IAAI,GAAG,KAAK,SAAS,CAAC,MAAM,IAAI;4CAC/E,CAAC;;gCACH;gCACA,UAAU;oCACR,MAAM;oCACN,WAAW,IAAI,OAAO,WAAW;gCACnC;4BACF;4BACA;wBACF;oBACF,EAAE,OAAO,GAAG;wBACV,QAAQ,GAAG,CAAC;oBACd;gBAEA,gCAAgC;gBAChC,oEAAoE;gBACpE,uCAAuC;gBACvC,iDAAiD;gBACjD,yCAAyC;gBACzC,sBAAsB;gBAEtB,iBAAiB;gBACjB,sCAAsC;gBACtC,qCAAqC;gBACrC,oCAAoC;gBACpC,kCAAkC;gBAClC,oDAAoD;gBACpD,kBAAkB;gBAClB,yCAAyC;gBACzC,UAAU;gBACV,mBAAmB;gBACnB,gBAAgB;gBAChB,yBAAyB;gBACzB,0CAA0C;gBAC1C,MAAM;gBACN,MAAM;gBACR,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,gBAAgB;gBAChC;YACF;QACF;kCAAG;QAAC;QAAU;KAAa;IAE3B,eAAe,WAAW,IAAY,EAAE,GAAW;QACjD,IAAI,SAAS,UAAU,IAAI,IAAI,IAAI;YACjC,UAAU;gBACR,MAAM;gBACN,SAAS;oBAAE,MAAM;gBAAI;gBACrB,UAAU;YACZ;YAEA,YAAY;YACZ,IAAI;gBACF,gBAAgB;gBAChB,MAAM,WAAW,MAAM,MAAM,qBAAqB;oBAChD,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;wBAAE,SAAS;wBAAK,MAAM;oBAAY;gBACzD;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,eAAe,MAAM,SAAS,IAAI;gBACxC,QAAQ,GAAG,CAAC,aAAa;gBAEzB,kBAAkB;gBAClB,IAAI,MAAM,OAAO,CAAC,eAAe;oBAC/B,iBAAiB;oBACjB,aAAa,OAAO,CAAC,CAAA;wBACnB,QAAQ,GAAG,CAAC,SAAS,IAAI,IAAI,EAAE;wBAC/B,UAAU;4BACR,MAAM,IAAI,IAAI;4BACd,SAAS,OAAO,IAAI,OAAO,KAAK,WAAW;gCAAE,MAAM,IAAI,OAAO;4BAAC,IAAI,IAAI,OAAO;4BAC9E,UAAU,IAAI,QAAQ;wBACxB;oBACF;gBACF,OAAO;oBACL,kBAAkB;oBAClB,UAAU;wBACR,MAAM,aAAa,IAAI;wBACvB,SAAS;4BAAE,MAAM,aAAa,OAAO;wBAAC;wBACtC,UAAU,aAAa,QAAQ;oBACjC;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,YAAY;gBAC1B,UAAU;oBACR,MAAM;oBACN,SAAS;wBAAE,MAAM;oBAAU;oBAC3B,UAAU;gBACZ;YACF;YACA,YAAY;QACd;IACF;IAEA,SAAS,sBAAsB,IAAgB;QAC7C,WAAW,QAAQ,KAAK,IAAI;IAC9B;IAEA,MAAM,uBAAuB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;2DAAE,CAAC;YACxC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG;YAC1B,QAAQ,GAAG,CAAC,OAAO;YACnB,IAAI,SAAS,UAAU,SAAS,MAAM;gBACpC,qBAAO,6LAAC,oJAAA,CAAA,SAAM;oBAAC,SAAS,QAAQ,IAAI;;;;;;YACtC;YAEA,IAAI,SAAS,cAAc,SAAS;gBAClC,MAAM,OAAO,OAAO,YAAY,WAAW,UAAU,SAAS,QAAQ;gBACtE,MAAM,OAAO,iJAAA,CAAA,SAAM,CAAC,KAAK,CAAC;gBAE1B,qBACE,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,yBAAyB;4BAAE,QAAQ;wBAAK;;;;;;;;;;;YAGnD;YAEA,gBAAgB;YAChB,IAAI,SAAS,WAAW,SAAS;gBAC/B,QAAQ,GAAG,CAAC,gBAAgB;gBAE5B,IAAI;oBACF,yDAAyD;oBACzD,IAAI,QAAQ,aAAa,EAAE;wBACzB,gBAAgB,OAAO,GAAG,KAAK,SAAS,CAAC,QAAQ,aAAa;wBAC9D,QAAQ,GAAG,CAAC,uBAAuB,gBAAgB,OAAO;oBAC5D;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,kBAAkB;gBAClC;gBAEA,qBACE,6LAAC,oJAAA,CAAA,SAAM;8BACL,cAAA,6LAAC,oJAAA,CAAA,QAAK;wBAAC,MAAM;wBAAC,WAAW;kCACvB,cAAA,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;0CAAK,KAAK,SAAS,CAAC,SAAS,MAAM;;;;;;;;;;;;;;;;;;;;;YAK9C;YAEA,qBAAqB;YACrB,IAAI,SAAS,SAAS,SAAS;gBAC7B,QAAQ,GAAG,CAAC,cAAc;gBAE1B,IAAI;oBACF,IAAG,oBAAoB,WAAW,OAAO,CAAC,iBAAiB,KAAK,aAAa;wBAC3E,QAAQ,GAAG,CAAC,aAAa;wBACzB,sBAAsB,OAAO,CAAC,UAAU;wBAExC,oBAAoB;wBACpB,gBAAgB,OAAO,GAAG,KAAK,SAAS,CAAC,OAAO,CAAC,UAAU;wBAC3D,QAAQ,GAAG,CAAC,6BAA6B,gBAAgB,OAAO;oBAClE;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,YAAY;gBAC5B;gBAEA,qBACE,6LAAC,oJAAA,CAAA,SAAM;8BACL,cAAA,6LAAC,oJAAA,CAAA,QAAK;wBAAC,MAAM;wBAAC,WAAW;kCACvB,cAAA,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;0CAAK,gBAAgB,OAAO;;;;;;;;;;;;;;;;;;;;;YAKvC;YAEA,OAAO;QACT;0DAAG,EAAE,GAAG,qBAAqB;IAqB7B,SAAS,sBAAsB,MAAuB;QACpD,oBAAoB;QACpB,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,YAAY;QACZ,IAAI,OAAO,KAAK,EAAE;YAChB,OAAO,KAAK,CAAC,OAAO,CAAC,CAAA;gBACnB,QAAQ,GAAG,CAAC,SAAS;YACrB,qBAAqB;YACvB;QACF;QAEA,YAAY;QACZ,IAAI,OAAO,MAAM,EAAE;YACjB,OAAO,MAAM,CAAC,OAAO,CAAC,CAAA;gBACpB,QAAQ,GAAG,CAAC,SAAS,MAAM,IAAI,EAAE,MAAM,IAAI;YAC3C,qBAAqB;YACvB;QACF;IACF;IAEA,yBAAyB;IACzB,SAAS,kBAAkB,UAAkB;QAC3C,iBAAiB;QACjB,MAAM,iBAAiB;QACvB,MAAM,iBAAiB,WAAW,KAAK,CAAC;QAExC,IAAI,CAAC,gBAAgB;YACnB,OAAO;QACT;QAEA,MAAM,gBAAgB,cAAc,CAAC,EAAE;QAEvC,IAAI;YACF,MAAM,SAA0B,CAAC;YAEjC,WAAW;YACX,MAAM,cAAc,cAAc,KAAK,CAAC;YACxC,IAAI,aAAa;gBACf,OAAO,MAAM,GAAG,WAAW,CAAC,EAAE;YAChC;YAEA,UAAU;YACV,MAAM,YAAY;YAClB,IAAI;YACJ,OAAO,KAAK,GAAG,EAAE;YAEjB,MAAO,CAAC,YAAY,UAAU,IAAI,CAAC,cAAc,MAAM,KAAM;gBAC3D,MAAM,cAAc,SAAS,CAAC,EAAE;gBAChC,MAAM,YAAY,YAAY,KAAK,CAAC;gBACpC,MAAM,eAAe,YAAY,KAAK,CAAC;gBAEvC,IAAI,aAAa,cAAc;oBAC7B,MAAM,UAAU,YAAY,CAAC,EAAE,CAC5B,KAAK,CAAC,MACN,GAAG,CAAC,CAAA;wBACH,MAAM,aAAa,UAAU,KAAK,CAAC;wBACnC,MAAM,aAAa,UAAU,KAAK,CAAC;wBACnC,MAAM,aAAa,UAAU,KAAK,CAAC;wBAEnC,MAAM,SAIF;4BACF,OAAO,aAAa,UAAU,CAAC,EAAE,GAAG;4BACpC,OAAO,aAAa,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,MAAM;wBACxD;wBAEA,IAAI,YAAY;4BACd,OAAO,KAAK,GAAG,UAAU,CAAC,EAAE;wBAC9B;wBAEA,gBAAgB;wBAChB,IAAI,CAAC,MAAM,OAAO,OAAO,KAAK,IAAI;4BAChC,OAAO,KAAK,GAAG,OAAO,OAAO,KAAK;wBACpC;wBAEA,OAAO;oBACT;oBAEF,OAAO,KAAK,CAAC,IAAI,CAAC;wBAChB,MAAM,SAAS,CAAC,EAAE;wBAClB;oBACF;gBACF;YACF;YAEA,WAAW;YACX,MAAM,aAAa;YACnB,IAAI;YACJ,OAAO,MAAM,GAAG,EAAE;YAElB,MAAO,CAAC,aAAa,WAAW,IAAI,CAAC,cAAc,MAAM,KAAM;gBAC7D,MAAM,eAAe,UAAU,CAAC,EAAE;gBAClC,MAAM,YAAY,aAAa,KAAK,CAAC;gBACrC,MAAM,aAAa,aAAa,KAAK,CAAC;gBACtC,MAAM,aAAa,aAAa,KAAK,CAAC;gBACtC,MAAM,aAAa,aAAa,KAAK,CAAC;gBAEtC,MAAM,QAMF;oBACF,MAAM,YAAY,SAAS,CAAC,EAAE,GAAG;oBACjC,MAAM,EAAE;oBACR,OAAO,aAAa,UAAU,CAAC,EAAE,GAAG;gBACtC;gBAEA,IAAI,YAAY;oBACd,MAAM,KAAK,GAAG,UAAU,CAAC,EAAE;gBAC7B;gBACA,IAAI,YAAY;oBACd,MAAM,KAAK,GAAG,UAAU,CAAC,EAAE;gBAC7B;gBAEA,eAAe;gBACf,IAAI,OAAmC,EAAE;gBACzC,IAAI,MAAM,IAAI,KAAK,OAAO;oBACxB,OAAO;wBACL;4BAAE,MAAM;4BAAM,OAAO;wBAAI;wBACzB;4BAAE,MAAM;4BAAM,OAAO;wBAAI;wBACzB;4BAAE,MAAM;4BAAM,OAAO;wBAAI;wBACzB;4BAAE,MAAM;4BAAM,OAAO;wBAAI;wBACzB;4BAAE,MAAM;4BAAM,OAAO;wBAAI;wBACzB;4BAAE,MAAM;4BAAM,OAAO;wBAAI;wBACzB;4BAAE,MAAM;4BAAM,OAAO;wBAAI;qBAC1B;gBACH,OAAO,IAAI,MAAM,IAAI,KAAK,QAAQ;oBAChC,OAAO;wBACL;4BAAE,OAAO;4BAAS,OAAO;wBAAG;wBAC5B;4BAAE,OAAO;4BAAU,OAAO;wBAAI;wBAC9B;4BAAE,OAAO;4BAAU,OAAO;wBAAG;wBAC7B;4BAAE,OAAO;4BAAQ,OAAO;wBAAG;qBAC5B;gBACH,OAAO,IAAI,MAAM,IAAI,KAAK,SAAS,MAAM,IAAI,KAAK,SAAS;oBACzD,OAAO;wBACL;4BAAE,MAAM;4BAAO,OAAO;wBAAI;wBAC1B;4BAAE,MAAM;4BAAM,OAAO;wBAAG;wBACxB;4BAAE,MAAM;4BAAM,OAAO;wBAAG;wBACxB;4BAAE,MAAM;4BAAM,OAAO;wBAAG;wBACxB;4BAAE,MAAM;4BAAM,OAAO;wBAAG;qBACzB;gBACH;gBAEA,OAAO,MAAM,CAAC,IAAI,CAAC;oBACjB,GAAG,KAAK;oBACR;gBACF;YACF;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,YAAY;YAC1B,OAAO;QACT;IACF;IAEA,sBAAsB;IACtB,SAAS,aAAa,OAAe,EAAE,GAAW;QAChD,MAAM,QAAQ,IAAI,OAAO,GAAG,IAAI,mCAAmC,CAAC,EAAE;QACtE,MAAM,QAAQ,QAAQ,KAAK,CAAC;QAC5B,OAAO,QAAQ,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK;IACnC;IAEA,cAAc;IACd,SAAS,eAAe,OAAe;QACrC,IAAI,CAAC,QAAQ,QAAQ,CAAC,YAAY;YAChC,OAAO,EAAE;QACX;QAEA,MAAM,eAAe,QAAQ,OAAO,CAAC;QACrC,MAAM,aAAa,QAAQ,OAAO,CAAC,KAAK;QACxC,IAAI,iBAAiB,CAAC,KAAK,eAAe,CAAC,GAAG;YAC5C,OAAO,EAAE;QACX;QAEA,MAAM,iBAAiB,QAAQ,SAAS,CAAC,cAAc,aAAa;QACpE,MAAM,gBAAgB,eAAe,KAAK,CAAC,iBAAiB,EAAE;QAE9D,OAAO,cAAc,GAAG,CAAC,CAAA;YACvB,OAAO;gBACL,OAAO,aAAa,WAAW;gBAC/B,OAAO,aAAa,WAAW;gBAC/B,OAAO,aAAa,WAAW;YACjC;QACF;IACF;IAEA,oBAAoB;IACpB,MAAM,wBAAwB;QAC5B,OAAO,kBAAkB,CAAC,YAAY,IAAI;IAC5C;IAEA,qBACE,6LAAC;QAAI,WAAU;kBAEb,cAAA,6LAAC,oJAAA,CAAA,UAAI;YACH,QAAQ;gBAAE,OAAO;YAAG;YACpB,UAAU;YACV,sBAAsB;YACtB,QAAQ;YACR,QAAO;YACP,aAAY;YACZ,KAAK;YACL,SAAS,EAAE;YACX,cAAc;YACd,mBAAmB;;;;;;;;;;;AAI3B;GArbwB;;QACU,oJAAA,CAAA,cAAW;QAClB,2IAAA,CAAA,kBAAe;;;MAFlB","debugId":null}}]
}