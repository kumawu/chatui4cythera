{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/lihan2/Documents/project/chatui4cythera/src/app/api/utils/chatApiHandler.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n/**\n * 通用聊天API处理函数\n * @param request 请求对象\n * @param apiKey Dify API密钥\n * @returns 流式响应\n */\nexport async function handleChatRequest(request: Request, apiKey: string) {\n  try {\n    const { message, role, conversationId, language } = await request.json();\n    \n    console.log(\"Chat API 请求:\", { message, role, conversationId, language });\n    \n    // 构建发送到 Dify 的请求体\n    const difyRequestBody = {\n      inputs: {\n        language: language || 'zh-CN' // 使用请求中的语言或默认值\n      },\n      query: message,\n      response_mode: \"streaming\", // 流式响应\n      conversation_id: conversationId, // 如果有会话ID则传递\n      user: role || \"default_user\" // 用户标识，这里使用角色名称\n    };\n\n    // 发送请求到 Dify API\n    const difyResponse = await fetch(process.env.DIFY_API_URL || \"https://api.dify.ai/v1/chat-messages\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(difyRequestBody)\n    });\n\n    if (!difyResponse.ok) {\n      const errorText = await difyResponse.text();\n      console.error(`Dify API 错误 (${difyResponse.status}):`, errorText);\n      return NextResponse.json(\n        { error: `Dify API 请求失败: ${difyResponse.status} ${difyResponse.statusText}` },\n        { status: difyResponse.status }\n      );\n    }\n\n    // 创建一个 TransformStream 来处理流式响应\n    const { readable, writable } = new TransformStream();\n    const writer = writable.getWriter();\n    const encoder = new TextEncoder();\n\n    // 处理 Dify 的流式响应\n    const reader = difyResponse.body?.getReader();\n    if (!reader) {\n      throw new Error(\"无法读取响应流\");\n    }\n\n    // 异步处理流\n    (async () => {\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            await writer.close();\n            break;\n          }\n\n          // 解码二进制数据\n          const chunk = new TextDecoder().decode(value);\n          const lines = chunk.split(\"\\n\");\n\n          for (const line of lines) {\n            if (line.startsWith(\"data: \") && line.length > 6) {\n              const data = line.slice(6);\n              \n              if (data === \"[DONE]\") {\n                continue;\n              }\n\n              try {\n                const parsedData = JSON.parse(data);\n                const responseChunk = {\n                  type: 'text',\n                  content: parsedData.answer || '',\n                  delta: parsedData.delta || '',\n                  position: 'left',\n                  metadata: {\n                    conversation_id: conversationId,\n                    event_type: parsedData.event || 'message',\n                    created_at: new Date().toISOString()\n                  }\n                };\n                \n                await writer.write(encoder.encode(`data: ${JSON.stringify(responseChunk)}\\n\\n`));\n              } catch (e) {\n                console.error('解析流数据错误:', e, data);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('读取流错误:', error);\n        await writer.abort(error as Error);\n      }\n    })();\n\n    // 返回流式响应\n    return new Response(readable, {\n      headers: {\n        \"Content-Type\": \"text/event-stream\",\n        \"Cache-Control\": \"no-cache\",\n        \"Connection\": \"keep-alive\"\n      }\n    });\n  } catch (error) {\n    console.error(\"处理聊天请求时出错:\", error);\n    return NextResponse.json(\n      { error: \"处理请求时发生错误\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///Users/lihan2/Documents/project/chatui4cythera/src/app/api/chat-bot1/route.ts"],"sourcesContent":["import { handleChatRequest } from '../utils/chatApiHandler';\n\nexport async function POST(request: Request) {\n  // 使用通用处理函数，传入特定的API密钥\n  return handleChatRequest(request, process.env.DIFY_API_KEY_1 || '');\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAgB;IACzC,sBAAsB;IACtB,OAAO,CAAA,GAAA,8IAAA,CAAA,oBAAiB,AAAD,EAAE,SAAS,QAAQ,GAAG,CAAC,cAAc,IAAI;AAClE","debugId":null}}]
}