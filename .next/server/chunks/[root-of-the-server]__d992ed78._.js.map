{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/lihan2/Documents/project/chatui4cythera/src/app/api/data-format/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Dify API 配置\nconst DIFY_API_URL = 'http://haf.api.weibo.com/v1/workflows/run';\nconst DIFY_API_KEY = 'app-ZzIiSaGBR6u4zqHsRHXgXXCv';\n\nexport async function POST(request: Request) {\n  try {\n    const { message, role, language } = await request.json();\n    \n    console.log(\"Dify Query API 请求:\", { message, role, language });\n    \n    // 构建发送到 Dify 的请求体\n    const difyRequestBody = {\n      inputs: {\n        content: message,\n        language: language || 'en-US' // 使用请求中的语言或默认值\n      }, // 可选的输入参数\n      response_mode: \"blocking\", // 阻塞模式\n      user: role || \"default_user\" // 用户标识，这里使用角色名称\n    };\n    \n    // 发送请求到 Dify API\n    const difyResponse = await fetch(DIFY_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${DIFY_API_KEY}`\n      },\n      body: JSON.stringify(difyRequestBody)\n    });\n    \n    if (!difyResponse.ok) {\n      const errorData = await difyResponse.json();\n      console.error(\"Dify API 错误:\", errorData);\n      throw new Error(`Dify API 请求失败: ${difyResponse.status} ${difyResponse.statusText}`);\n    }\n    \n    // 处理 Dify 响应\n    const data = await difyResponse.json();\n    console.log(\"Dify API 响应:\", data.data.outputs);\n    \n    // 构建返回给前端的响应\n    const response = data.data.outputs.data;\n    \n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Dify Query API 错误:', error);\n    return NextResponse.json(\n      { \n        error: '处理请求时出错',\n        message: error instanceof Error ? error.message : '未知错误'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,cAAc;AACd,MAAM,eAAe;AACrB,MAAM,eAAe;AAEd,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEtD,QAAQ,GAAG,CAAC,sBAAsB;YAAE;YAAS;YAAM;QAAS;QAE5D,kBAAkB;QAClB,MAAM,kBAAkB;YACtB,QAAQ;gBACN,SAAS;gBACT,UAAU,YAAY,QAAQ,eAAe;YAC/C;YACA,eAAe;YACf,MAAM,QAAQ,eAAe,gBAAgB;QAC/C;QAEA,iBAAiB;QACjB,MAAM,eAAe,MAAM,MAAM,cAAc;YAC7C,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,cAAc;YAC3C;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,aAAa,EAAE,EAAE;YACpB,MAAM,YAAY,MAAM,aAAa,IAAI;YACzC,QAAQ,KAAK,CAAC,gBAAgB;YAC9B,MAAM,IAAI,MAAM,CAAC,eAAe,EAAE,aAAa,MAAM,CAAC,CAAC,EAAE,aAAa,UAAU,EAAE;QACpF;QAEA,aAAa;QACb,MAAM,OAAO,MAAM,aAAa,IAAI;QACpC,QAAQ,GAAG,CAAC,gBAAgB,KAAK,IAAI,CAAC,OAAO;QAE7C,aAAa;QACb,MAAM,WAAW,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI;QAEvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}