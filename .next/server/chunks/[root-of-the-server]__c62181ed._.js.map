{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/lihan2/Documents/project/chatui4cythera/src/app/api/chat-bot4/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Dify API 配置\nconst DIFY_API_URL = 'http://haf.api.weibo.com/v1/chat-messages';\nconst DIFY_API_KEY = process.env.DIFY_API_KEY || 'app-eIojnVljpRicGH1Y1MMRBgzC'; // 建议使用环境变量\n\nexport async function POST(request: Request) {\n  try {\n    const { message, role, conversationId, language } = await request.json();\n    \n    console.log(\"Chat API 请求:\", { message, role, conversationId, language });\n    \n    // 构建发送到 Dify 的请求体\n    const difyRequestBody = {\n      inputs: {\n        language: language || 'en-US' // 默认使用英文\n      }, // 可选的输入参数\n      query: message,\n      response_mode: \"streaming\", // 流式响应\n      conversation_id: conversationId, // 如果有会话ID则传递\n      user: role || \"default_user\" // 用户标识，这里使用角色名称\n    };\n    \n    // 发送请求到 Dify API\n    const difyResponse = await fetch(DIFY_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${DIFY_API_KEY}`,\n        'Accept': 'text/event-stream'\n      },\n      body: JSON.stringify(difyRequestBody)\n    });\n    \n    if (!difyResponse.ok) {\n      const errorData = await difyResponse.json();\n      console.error(\"Dify API 错误:\", errorData);\n      throw new Error(`Dify API 请求失败: ${difyResponse.status} ${difyResponse.statusText}`);\n    }\n    \n    // 当使用流式响应时，直接返回流\n    const responseStream = difyResponse.body;\n    if (!responseStream) {\n      throw new Error('无法获取响应流');\n    }\n    \n    // 创建一个新的 ReadableStream\n    const stream = new ReadableStream({\n      async start(controller) {\n        // 创建一个读取器来处理流数据\n        const reader = responseStream.getReader();\n        let conversationId: string | null = null;\n        \n        try {\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            \n            // 将 Uint8Array 转换为文本\n            const chunk = new TextDecoder().decode(value);\n            const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n            \n            for (const line of lines) {\n              if (line.startsWith('data: ')) {\n                const data = line.slice(6);\n                if (data === '[DONE]') continue;\n                \n                try {\n                  const parsedData = JSON.parse(data);\n                  \n                  // 保存会话 ID\n                  if (parsedData.conversation_id && !conversationId) {\n                    conversationId = parsedData.conversation_id;\n                  }\n                  \n                  // 将数据发送到客户端\n                  const responseChunk = {\n                    type: 'text',\n                    content: parsedData.answer || '',\n                    delta: parsedData.delta || '',\n                    position: 'left',\n                    metadata: {\n                      conversation_id: conversationId,\n                      event_type: parsedData.event || 'message',\n                      created_at: new Date().toISOString()\n                    }\n                  };\n                  \n                  controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify(responseChunk)}\\n\\n`));\n                } catch (e) {\n                  console.error('解析流数据错误:', e, data);\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.error('读取流错误:', error);\n          controller.error(error);\n        } finally {\n          controller.close();\n        }\n      }\n    });\n    \n    // 返回流式响应\n    return new Response(stream, {\n      headers: {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Chat API 错误:', error);\n    return NextResponse.json(\n      { \n        error: '处理请求时出错',\n        message: error instanceof Error ? error.message : '未知错误'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}